generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["darwin-arm64", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  email        String        @unique
  cognito_id   String        @unique
  birthday     DateTime
  phone        Phone
  first_name   String
  last_name    String
  confirmed    Boolean
  accounts     Account[]
  categories   Category[]
  cards        Card[]
  invoices     Invoice[]
  transactions Transaction[]

  @@map("user")
}

type Phone {
  country   String
  area_code Int
  number    Int
}

model Category {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  user         User          @relation(fields: [cognito_id], references: [cognito_id])
  cognito_id   String
  description  String
  color        String
  active       Boolean
  type         String
  parent_id    String?       @db.ObjectId
  parent       Category?     @relation("Parent", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  child        Category[]    @relation("Parent")
  transactions Transaction[]

  @@map("category")
}

model Account {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  user         User          @relation(fields: [cognito_id], references: [cognito_id])
  cognito_id   String
  type         String
  description  String
  balance      Float
  color        String
  transactions Transaction[]

  @@map("account")
}

model Transaction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  card        Card?    @relation(fields: [card_id], references: [id])
  card_id     String?  @db.ObjectId
  account     Account? @relation(fields: [account_id], references: [id])
  account_id  String?  @db.ObjectId
  user        User     @relation(fields: [cognito_id], references: [cognito_id])
  cognito_id  String
  date        DateTime
  description String
  type        String
  category    Category @relation(fields: [category_id], references: [id])
  category_id String   @db.ObjectId
  recurrence  Boolean
  payments    Int
  value       Float

  @@map("transaction")
}

model Card {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  user        User          @relation(fields: [cognito_id], references: [cognito_id])
  cognito_id  String
  brand       String
  description String
  closing_day Int
  due_date    Int
  limit       Float
  invoices    Invoice[]
  transaction Transaction[]

  @@map("card")
}

model Invoice {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         User     @relation(fields: [cognito_id], references: [cognito_id])
  cognito_id   String
  card         Card     @relation(fields: [card_id], references: [id])
  card_id      String   @db.ObjectId
  closing_date DateTime
  due_date     DateTime
  total        Float
  status       String

  @@map("invoice")
}
